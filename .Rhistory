lhs-rhs
all.equal(lhs,rhs)
varChild<-var(children)
varChild<-var(galton$Children)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var()
varEst<-var(los.slope*ols.ic)
varEst<-var(ols.slope*ols.ic)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,(varEst+varRes))
all.equal(varChild,varEst+varRes)
efit<-lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
lnor<-lm(children~parent)
lnor<-lm(children~parent, galton)
lnor<-lm(child~parent, galton)
lnor<-lm(gch_nor~gpa_nor)
lnor <- lm(gch_nor~gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
data(galton)
use(galton)
0
exit
quit
fit<-lm(child~parent, galton)
0
quit
library(swirl)
swirl()
fit<-lm(child~parent, galton)
sqrt(sum(fit%residuals)/(n-2))
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(child)
mu<-mean(children)
mu<-mean(galton$child)
sTot
sTot<-1
sTot<-sum((galton$child-mu)2)
sTot<-sum((galton$child-mu)^2)
sRes<-1
sRes<-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(galton$children, galton$parent)^2)
View(galton)
(cor(galton$child, galton$parent)^2)
(cor(galton$parent, galton$child)^2)
cor(galton$parent, galton$child)^2
ones<-rep(1,nrow(galton))
0
swirl
swirl()
ones<-rep(1, nrow(galton))
ones
swirl()
lm(child~ones+parent-1, galton)
lm(child~parent, galton)
lm(child~1)
lm(child~1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2<-eliminate("Girth", trees)
View(trees2)
fit2 <-lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(child~parent, galton)
lm(child~parent-1, galton)
View(trees)
lm(Constant)
lm(Volume,Constant+Girth+Height)
lm(Volume~Constant+Girth+Height, trees)
lm(Volume~Constant+Girth+Height-1, trees)
lm(Volume~Constant+Girth-1, trees)
lm(Volume~Constant+Girth, trees)
lm(Volume~Constant-1, trees)
lm(Volume~Constant, trees)
swirl()
0
0
0
exit
quit
0
exit
q()
install_from
install.packages("swirl")
library(swirl)
install_from_swirl()
install_from_swirl("Regression Models")
swirl()
quit
quit()
install.packages("knitr")
install.packages("RODBC")
mean(x_w)
source('~/Data Science Specialization/07 Regression Models/Quiz1.R')
bwplot(mpg~am, data=mtcars)
data(mtcars)
data(mtcars)
# Replace automatic/manual factor with descriptive terms and lower case to make it easier
mtcars$am[which(mtcars$am==0)]<-"automatic trasmission"
mtcars$am[which(mtcars$am==1)]<-"manual transmission"
mtcars$am<-as.factor(mtcars$am)
# Replace "vs" factor with descriptive terms and lower case to make it easier
mtcars$vs[which(mtcars$vs==0)]<-"v engine"
mtcars$vs[which(mtcars$vs==1)]<-"straight engine"
mtcars$vs<-as.factor(mtcars$vs)
# Create facors in cylinders, # of gears, and # of carburators to factors
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
install.packages("lattice")
library(lattice)
bwplot(mpg~am, data=mtcars)
install.packages("ggplot2")
bp1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
library(ggplot2)
p1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
bp1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
bp1 <- bp1 + stat_summary(fun.data = summary.data, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Miles per Gallon (MPG) by Transmission") + xlab("Transmission (0 = automatic, 1 = manual)") + ylab("MPG - Miles per Gallon")
summary.data <- function(x) {
temp <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(temp) <- c("ymin", "lower", "middle", "upper", "ymax")
temp
}
bp1 <- bp1 + stat_summary(fun.data = summary.data, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Miles per Gallon (MPG) by Transmission") + xlab("Transmission (0 = automatic, 1 = manual)") + ylab("MPG - Miles per Gallon")
temp
bp1
datAuto <- mtcars$mpg[mtcars$am == "automatic trasmission"]
datManual <- mtcars$mpg[mtcars$am == "manual trasmission"];
t.test(datAuto, datManual, paired = FALSE, alternative="two.sided", var.equal=FALSE)
data(mtcars)
# Replace automatic/manual factor with descriptive terms and lower case to make it easier
mtcars$am[which(mtcars$am==0)]<-"automatic trasmission"
mtcars$am[which(mtcars$am==1)]<-"manual transmission"
mtcars$am<-as.factor(mtcars$am)
# Replace "vs" factor with descriptive terms and lower case to make it easier
mtcars$vs[which(mtcars$vs==0)]<-"v engine"
mtcars$vs[which(mtcars$vs==1)]<-"straight engine"
mtcars$vs<-as.factor(mtcars$vs)
# Create facors in cylinders, # of gears, and # of carburators to factors
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
require(lattice)
require(ggplot2)
summary.data <- function(x) {
temp <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(temp) <- c("ymin", "lower", "middle", "upper", "ymax")
temp
}
bp1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
bp1 <- bp1 + stat_summary(fun.data = summary.data, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Miles per Gallon (MPG) by Transmission") + xlab("Transmission") + ylab("MPG - Miles per Gallon")
bp1
datAuto <- mtcars$mpg[mtcars$am == "automatic trasmission"]
datManual <- mtcars$mpg[mtcars$am == "manual trasmission"];
t.test(datAuto, datManual, paired = FALSE, alternative="two.sided", var.equal=FALSE)
View(mtcars)
data(mtcars)
# Replace automatic/manual factor with descriptive terms and lower case to make it easier
mtcars$am[which(mtcars$am==0)]<-"automatic transmission"
mtcars$am[which(mtcars$am==1)]<-"manual transmission"
mtcars$am<-as.factor(mtcars$am)
# Replace "vs" factor with descriptive terms and lower case to make it easier
mtcars$vs[which(mtcars$vs==0)]<-"v engine"
mtcars$vs[which(mtcars$vs==1)]<-"straight engine"
mtcars$vs<-as.factor(mtcars$vs)
# Create facors in cylinders, # of gears, and # of carburators to factors
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
require(lattice)
require(ggplot2)
summary.data <- function(x) {
temp <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(temp) <- c("ymin", "lower", "middle", "upper", "ymax")
temp
}
bp1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
bp1 <- bp1 + stat_summary(fun.data = summary.data, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Miles per Gallon (MPG) by Transmission") + xlab("Transmission") + ylab("MPG - Miles per Gallon")
bp1
datAuto <- mtcars$mpg[mtcars$am == "automatic transmission"]
datManual <- mtcars$mpg[mtcars$am == "manual transmission"];
t.test(datAuto, datManual, paired = FALSE, alternative="two.sided", var.equal=FALSE)
hpavg<-mean(mtcars$hp)-mtcars$hp
lm.hp.cyl.vs2<-lm(mpg~am+wt+qsec, data=mtcars)
summary(lm.hp.cyl.vs2)[c(4,9)]
hpavg<-mean(mtcars$hp)-mtcars$hp
lm.hp.cyl.vs<-lm(mpg~am+hpavg+cyl+vs, data=mtcars)
summary(lm.hp.cyl.vs)[c(4,9)]
lm.simple<-lm(mpg~am, data=mtcars)
summary(lm.simple)[c(4,9)]
lm.all<-lm(mpg~., data=mtcars)
summary(lm.all)
lmOne<-lm(mpg~am, data=mtcars)
##summary(lm.simple)[c(4,9)]
summary(lmOne)
summary(lm.simple)[c(4,9)]
summary(lmAll)[c(9)]
lmAll<-lm(mpg~., data=mtcars)
summary(lmAll)[c(9)]
summary(lmAll)[c(4,9)]
summary(lmAll)[c(9)]
lm.hp.cyl.vs<-lm(mpg~am+hp+cyl+vs, data=mtcars)
summary(lm.hp.cyl.vs)[c(4,9)]
lmAll<-lm(mpg~., data=mtcars)
#summary(lmAll)[c(9)]
summary(lmAll)[c(4,9)]
hpavg<-mean(mtcars$hp)-mtcars$hp
lm.hp.cyl.vs<-lm(mpg~am+hpavg+cyl+vs, data=mtcars)
summary(lm.hp.cyl.vs)[c(4,9)]
lm.hp.cyl.vs<-lm(mpg~am+hp+cyl+vs, data=mtcars)
summary(lm.hp.cyl.vs)[c(4,9)]
plot(lmOne)
plot(lmAll)
plot(lmFinal)
plot(lmFinal)
data(mtcars)
# Replace automatic/manual factor with descriptive terms and lower case to make it easier
mtcars$am[which(mtcars$am==0)]<-"automatic transmission"
mtcars$am[which(mtcars$am==1)]<-"manual transmission"
mtcars$am<-as.factor(mtcars$am)
# Replace "vs" factor with descriptive terms and lower case to make it easier
mtcars$vs[which(mtcars$vs==0)]<-"v engine"
mtcars$vs[which(mtcars$vs==1)]<-"straight engine"
mtcars$vs<-as.factor(mtcars$vs)
# Create facors in cylinders, # of gears, and # of carburators to factors
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
datAuto <- mtcars$mpg[mtcars$am == "automatic transmission"]
datManual <- mtcars$mpg[mtcars$am == "manual transmission"];
t.test(datAuto, datManual, paired = FALSE, alternative="two.sided", var.equal=FALSE)
lmOne<-lm(mpg~am, data=mtcars)
summary(lmOne)[c(4,9)]
lmAll<-lm(mpg~., data=mtcars)
#summary(lmAll)[c(9)]
summary(lmAll)[c(9)]
lmFinal<-lm(mpg~am+hp+cyl+vs, data=mtcars)
summary(lmFinal)[c(4,9)]
fig.height=3}
require(lattice)
require(ggplot2)
summary.data <- function(x) {
temp <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(temp) <- c("ymin", "lower", "middle", "upper", "ymax")
temp
}
bp1 <- ggplot(aes(y = mpg, x = factor(am), fill=factor(am)), data = mtcars)
bp1 <- bp1 + stat_summary(fun.data = summary.data, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Miles per Gallon (MPG) by Transmission") + xlab("Transmission") + ylab("MPG - Miles per Gallon")
bp1
require(graphics)
pairs(mtcars,main = "Pair Panel - Mtcars variables", panel=panel.smooth)
require(graphics)
pairs(mtcars,main = "Pair Panel - Mtcars dataset", panel=panel.smooth)
bwplot(mpg~am|vs, data=mtcars, main="Fuel Economy by Trasmission and Engine Type")
bwplot(mpg~am|cyl, data=mtcars, main="Fuel Economy by Transmission and Number of Cylinders")
bwplot(mpg~am|cut(hp,4), data=mtcars, main="Fuel Economy by Transmission and Horse Power")
bwplot(mpg~am|vs, data=mtcars, main="Fuel Economy by Trasmission and Engine Type")
bwplot(mpg~am|cyl, data=mtcars, main="Fuel Economy by Transmission and Number of Cylinders")
bwplot(mpg~am|cut(hp,4), data=mtcars, main="Fuel Economy by Transmission and Horse Power")
par(mfrow=c(2,2))
plot(lmFinal)
par(mfrow=c(1,1))
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~
| parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
omnitest(correctExpr='summary(fit)')
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertiliy ~ Agriculture, swiss
)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)'
anova(mdl)
qchisq(0.95, 1)'
qchisq(0.95, 1)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)'
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
View(hits)
class(hits[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date'])
)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
exit
quit
setwd("C:\Users\220194\Documents\Data Science Specialization\08 Practical Machine Learning\PracticalMachineLearning")
training <- read.csv("pml-training.csv",na.strings = c("NA", ""))
test <- read.csv("pml-testing.csv",na.strings = c("NA", ""))
library(caret)
library(ggplot2)
library(corrplot)
library(randomForest)
setwd("C:\Users\220194\Documents\Data Science Specialization\08 Practical Machine Learning\PracticalMachineLearning")
setwd("C:\Users\220194\Documents\Data Science Specialization\08 Practical Machine Learning\PracticalMachineLearning")
setwd("C:/Users/220194/Documents/Data Science Specialization/08 Practical Machine Learning/PracticalMachineLearning")
getwd()
training <- read.csv("pml-training.csv",na.strings = c("NA", ""))
test <- read.csv("pml-testing.csv",na.strings = c("NA", ""))
setwd("C:/Users/220194/Documents/Data Science Specialization/08 Practical Machine Learning/PracticalMachineLearning")
training <- read.csv("pml-training.csv",na.strings = c("NA", ""))
test <- read.csv("pml-testing.csv",na.strings = c("NA", ""))
sapply(test,class)
training_aux <- training[, -(grep("timestamp|X|user_name|num_window|new_window", names(training)))]
test_aux <- test[, -(grep("timestamp|X|user_name|num_window|new_window", names(test)))]
NAs <- apply(training_aux, 2, function(x) {
sum(is.na(x))})
training_aux <- training_aux[, which(NAs == 0)]
test_aux <- test_aux[, which(NAs == 0)]
training.idx <- training_aux[createDataPartition(y = training_aux$classe, p = 0.6, list = FALSE), ]
test.idx <- training_aux[-createDataPartition(y = training_aux$classe, p = 0.6, list = FALSE), ]
dim(training.idx)
head(training.idx)
Graph <- training.idx
NAs <- apply(training.idx, 2, function(x) {
sum(is.na(x))
})
Graph<- training.idx[, which(NAs == 0)]
CorrePlot = cor( Graph[,-c(grep("timestamp|X|user_name|num_window|new_window",names(Graph)), length(Graph))])
corrplot(CorrePlot, method="circle",tl.cex=0.9)
set.seed(10)
MyModel.Forest<- train(training.idx$classe ~ ., data = training.idx, method = "rf",
prof = TRUE, trControl = trainControl(method = "boot", number = 5, allowParallel = TRUE))
summary(MyModel.Forest)
MyModel.Forest
MyModel.Forest.Final<- MyModel.Forest$results
round(max(MyModel.Forest.Final$Accuracy), 3) * 100
set.seed(10)
CrossValidatedError <- confusionMatrix((predict(MyModel.Forest, test.idx)), test.idx$classe)
CrossValidatedError
postResample((predict(MyModel.Forest, test.idx)), test.idx$classe)[[1]]
1- postResample((predict(MyModel.Forest, test.idx)), test.idx$classe)[[1]]
pml_write_files = function(x, directory="solutionfiles"){
dir.create (directory)
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
filename=filepath(directory, filename)
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
Model.Prediction <- predict(MyModel.Forest, test)
Model.Prediction
pml_write_files(Model.Prediction)
pml_write_files = function(x, directory="solutionfiles"){
dir.create (directory)
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
filename=file.path(directory, filename)
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
Model.Prediction <- predict(MyModel.Forest, test)
Model.Prediction
pml_write_files(Model.Prediction)
Model.Prediction <- predict(MyModel.Forest, test)
Model.Prediction
pml_write_files(Model.Prediction)
